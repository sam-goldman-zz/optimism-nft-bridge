"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const glob_1 = __importDefault(require("glob"));
const main = async () => {
    let content = `
  /* eslint-disable */
  /*
  THIS FILE IS AUTOMATICALLY GENERATED.
  DO NOT EDIT.
  */
  `;
    const deploymentNames = fs_1.default
        .readdirSync(path_1.default.resolve(__dirname, '../deployments'), {
        withFileTypes: true,
    })
        .filter((entry) => {
        return entry.isDirectory();
    })
        .map((entry) => {
        return entry.name;
    });
    const artifactNames = [];
    const pattern = /\\/g;
    for (const deploymentName of deploymentNames) {
        const deploymentArtifacts = glob_1.default.sync(path_1.default.join(path_1.default.resolve(__dirname, '../deployments'), deploymentName, '/*.json'));
        for (const artifactPath of deploymentArtifacts) {
            const relPath = path_1.default
                .relative(__dirname, artifactPath)
                .replace(pattern, '/');
            const contractName = path_1.default.basename(artifactPath, '.json');
            const artifactName = `${deploymentName}__${contractName}`.replace(/-/g, '_');
            artifactNames.push(artifactName);
            content += `const ${artifactName} = require('${relPath}')\n`;
        }
    }
    content += `
  export const getDeployedContractArtifact = (name: string, network: string): any => {
    return {
      ${artifactNames.join(',\n')}
    }[(network + '__' + name).replace(/-/g, '_')]
  }
  `;
    fs_1.default.writeFileSync(`./src/contract-deployed-artifacts.ts`, content);
};
main();
//# sourceMappingURL=generate-deployed-artifacts.js.map