/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  TestLibBytesUtils,
  TestLibBytesUtilsInterface,
} from "../TestLibBytesUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_preBytes",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_postBytes",
        type: "bytes",
      },
    ],
    name: "concat",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "_other",
        type: "bytes",
      },
    ],
    name: "equal",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
    ],
    name: "fromNibbles",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_length",
        type: "uint256",
      },
    ],
    name: "slice",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "_start",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_length",
        type: "uint256",
      },
    ],
    name: "sliceWithTaintedMemory",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
    ],
    name: "toBytes32",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
    ],
    name: "toNibbles",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_bytes",
        type: "bytes",
      },
    ],
    name: "toUint256",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061124c806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063c6fa7f7a1161005b578063c6fa7f7a14610109578063cf89ee171461011c578063e00413961461012f578063efa739761461014257600080fd5b8063235266d21461008d57806347f53431146100b55780635f3376f3146100d6578063bd37c8aa146100f6575b600080fd5b6100a061009b3660046107f9565b610155565b60405190151581526020015b60405180910390f35b6100c86100c336600461085d565b610179565b6040519081526020016100ac565b6100e96100e43660046107f9565b61018a565b6040516100ac91906108c2565b6100c861010436600461085d565b6101b6565b6100e961011736600461085d565b6101c1565b6100e961012a366004610913565b6101cc565b6100e961013d366004610913565b61020b565b6100e961015036600461085d565b610218565b600061017283838051602091820120825192909101919091201490565b9392505050565b600061018482610223565b92915050565b6060828260405160200161019f929190610961565b604051602081830303815290604052905092915050565b600061018482610179565b60606101848261024b565b60606040516101da90610712565b604051809103906000f0801580156101f6573d6000803e3d6000fd5b50506102038484846103ce565b949350505050565b60606102038484846103ce565b6060610184826105c0565b600060208251101561023757506020015190565b818060200190518101906101849190610990565b606060008251600261025d91906109d8565b67ffffffffffffffff8111156102755761027561071f565b6040519080825280601f01601f19166020018201604052801561029f576020820181803683370190505b50905060005b83518110156103c75760048482815181106102c2576102c2610a15565b01602001517fff0000000000000000000000000000000000000000000000000000000000000016901c826102f78360026109d8565b8151811061030757610307610a15565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350601084828151811061034a5761034a610a15565b016020015161035c919060f81c610a73565b60f81b8261036b8360026109d8565b610376906001610a95565b8151811061038657610386610a15565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806103bf81610aad565b9150506102a5565b5092915050565b6060816103dc81601f610a95565b1015610449576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064015b60405180910390fd5b826104548382610a95565b10156104bc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401610440565b6104c68284610a95565b84511015610530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401610440565b60608215801561054f57604051915060008252602082016040526105b7565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610588578051835260209283019201610570565b5050858452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b50949350505050565b60606000600283516105d29190610ae6565b67ffffffffffffffff8111156105ea576105ea61071f565b6040519080825280601f01601f191660200182016040528015610614576020820181803683370190505b50905060005b81518110156103c7578361062f8260026109d8565b61063a906001610a95565b8151811061064a5761064a610a15565b01602001517fff000000000000000000000000000000000000000000000000000000000000001660048561067f8460026109d8565b8151811061068f5761068f610a15565b602001015160f81c60f81b7effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901b178282815181106106d1576106d1610a15565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061070a81610aad565b91505061061a565b61071c80610afb83390190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261075f57600080fd5b813567ffffffffffffffff8082111561077a5761077a61071f565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156107c0576107c061071f565b816040528381528660208588010111156107d957600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561080c57600080fd5b823567ffffffffffffffff8082111561082457600080fd5b6108308683870161074e565b9350602085013591508082111561084657600080fd5b506108538582860161074e565b9150509250929050565b60006020828403121561086f57600080fd5b813567ffffffffffffffff81111561088657600080fd5b6102038482850161074e565b60005b838110156108ad578181015183820152602001610895565b838111156108bc576000848401525b50505050565b60208152600082518060208401526108e1816040850160208701610892565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008060006060848603121561092857600080fd5b833567ffffffffffffffff81111561093f57600080fd5b61094b8682870161074e565b9660208601359650604090950135949350505050565b60008351610973818460208801610892565b835190830190610987818360208801610892565b01949350505050565b6000602082840312156109a257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a1057610a106109a9565b500290565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600060ff831680610a8657610a86610a44565b8060ff84160691505092915050565b60008219821115610aa857610aa86109a9565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610adf57610adf6109a9565b5060010190565b600082610af557610af5610a44565b50049056fe608060405234801561001057600080fd5b506106fc806100206000396000f3fe608060405234801561001057600080fd5b50600436106100be5760003560e01c806340c10f191161007657806395d89b411161005b57806395d89b41146101b1578063a9059cbb146101ed578063dd62ed3e1461020057600080fd5b806340c10f191461017c57806370a082311461019157600080fd5b806318160ddd116100a757806318160ddd1461013857806323b872dd1461014f578063313ce5671461016257600080fd5b806306fdde03146100c3578063095ea7b314610115575b600080fd5b6100ff6040518060400160405280600481526020017f546573740000000000000000000000000000000000000000000000000000000081525081565b60405161010c9190610511565b60405180910390f35b6101286101233660046105ad565b61022b565b604051901515815260200161010c565b61014160005481565b60405190815260200161010c565b61012861015d3660046105d7565b610241565b61016a601281565b60405160ff909116815260200161010c565b61018f61018a3660046105ad565b61031b565b005b61014161019f366004610613565b60016020526000908152604090205481565b6100ff6040518060400160405280600381526020017f545354000000000000000000000000000000000000000000000000000000000081525081565b6101286101fb3660046105ad565b6103c6565b61014161020e366004610635565b600260209081526000928352604080842090915290825290205481565b60006102383384846103d3565b50600192915050565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002602090815260408083203384529091528120547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff146103065773ffffffffffffffffffffffffffffffffffffffff841660009081526002602090815260408083203384529091529020546102d4908390610697565b73ffffffffffffffffffffffffffffffffffffffff851660009081526002602090815260408083203384529091529020555b610311848484610442565b5060019392505050565b8060005461032991906106ae565b600090815573ffffffffffffffffffffffffffffffffffffffff831681526001602052604090205461035c9082906106ae565b73ffffffffffffffffffffffffffffffffffffffff83166000818152600160205260408082209390935591519091907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906103ba9085815260200190565b60405180910390a35050565b6000610238338484610442565b73ffffffffffffffffffffffffffffffffffffffff83811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260016020526040902054610473908290610697565b73ffffffffffffffffffffffffffffffffffffffff80851660009081526001602052604080822093909355908416815220546104b09082906106ae565b73ffffffffffffffffffffffffffffffffffffffff80841660008181526001602052604090819020939093559151908516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906104359085815260200190565b600060208083528351808285015260005b8181101561053e57858101830151858201604001528201610522565b81811115610550576000604083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016929092016040019392505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146105a857600080fd5b919050565b600080604083850312156105c057600080fd5b6105c983610584565b946020939093013593505050565b6000806000606084860312156105ec57600080fd5b6105f584610584565b925061060360208501610584565b9150604084013590509250925092565b60006020828403121561062557600080fd5b61062e82610584565b9392505050565b6000806040838503121561064857600080fd5b61065183610584565b915061065f60208401610584565b90509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156106a9576106a9610668565b500390565b600082198211156106c1576106c1610668565b50019056fea26469706673582212202815312896f87dd17755da274a3e8739684a4ded8acfa86d8baf4fafbb3d4c0864736f6c63430008090033a2646970667358221220029c74bfc58b89d03b703d138166605979cdd9eaa1dc9126d4fdd4d8dae0c4e564736f6c63430008090033";

type TestLibBytesUtilsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestLibBytesUtilsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestLibBytesUtils__factory extends ContractFactory {
  constructor(...args: TestLibBytesUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<TestLibBytesUtils> {
    return super.deploy(overrides || {}) as Promise<TestLibBytesUtils>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TestLibBytesUtils {
    return super.attach(address) as TestLibBytesUtils;
  }
  connect(signer: Signer): TestLibBytesUtils__factory {
    return super.connect(signer) as TestLibBytesUtils__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestLibBytesUtilsInterface {
    return new utils.Interface(_abi) as TestLibBytesUtilsInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestLibBytesUtils {
    return new Contract(address, _abi, signerOrProvider) as TestLibBytesUtils;
  }
}
