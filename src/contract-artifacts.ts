
    /* eslint-disable @typescript-eslint/no-var-requires, no-empty */
    /*
    THIS FILE IS AUTOMATICALLY GENERATED.
    DO NOT EDIT.
    */

    
        let iL1ChugSplashDeployer
        try {
          iL1ChugSplashDeployer = require('../artifacts/contracts/chugsplash/interfaces/iL1ChugSplashDeployer.sol/iL1ChugSplashDeployer.json')
        } catch {}
        

        let L1ChugSplashProxy
        try {
          L1ChugSplashProxy = require('../artifacts/contracts/chugsplash/L1ChugSplashProxy.sol/L1ChugSplashProxy.json')
        } catch {}
        

        let AddressDictator
        try {
          AddressDictator = require('../artifacts/contracts/L1/deployment/AddressDictator.sol/AddressDictator.json')
        } catch {}
        

        let ChugSplashDictator
        try {
          ChugSplashDictator = require('../artifacts/contracts/L1/deployment/ChugSplashDictator.sol/ChugSplashDictator.json')
        } catch {}
        

        let IL1CrossDomainMessenger
        try {
          IL1CrossDomainMessenger = require('../artifacts/contracts/L1/messaging/IL1CrossDomainMessenger.sol/IL1CrossDomainMessenger.json')
        } catch {}
        

        let IL1ERC20Bridge
        try {
          IL1ERC20Bridge = require('../artifacts/contracts/L1/messaging/IL1ERC20Bridge.sol/IL1ERC20Bridge.json')
        } catch {}
        

        let IL1ERC721Bridge
        try {
          IL1ERC721Bridge = require('../artifacts/contracts/L1/messaging/IL1ERC721Bridge.sol/IL1ERC721Bridge.json')
        } catch {}
        

        let IL1StandardBridge
        try {
          IL1StandardBridge = require('../artifacts/contracts/L1/messaging/IL1StandardBridge.sol/IL1StandardBridge.json')
        } catch {}
        

        let L1CrossDomainMessenger
        try {
          L1CrossDomainMessenger = require('../artifacts/contracts/L1/messaging/L1CrossDomainMessenger.sol/L1CrossDomainMessenger.json')
        } catch {}
        

        let L1ERC721Bridge
        try {
          L1ERC721Bridge = require('../artifacts/contracts/L1/messaging/L1ERC721Bridge.sol/L1ERC721Bridge.json')
        } catch {}
        

        let L1StandardBridge
        try {
          L1StandardBridge = require('../artifacts/contracts/L1/messaging/L1StandardBridge.sol/L1StandardBridge.json')
        } catch {}
        

        let CanonicalTransactionChain
        try {
          CanonicalTransactionChain = require('../artifacts/contracts/L1/rollup/CanonicalTransactionChain.sol/CanonicalTransactionChain.json')
        } catch {}
        

        let ChainStorageContainer
        try {
          ChainStorageContainer = require('../artifacts/contracts/L1/rollup/ChainStorageContainer.sol/ChainStorageContainer.json')
        } catch {}
        

        let ICanonicalTransactionChain
        try {
          ICanonicalTransactionChain = require('../artifacts/contracts/L1/rollup/ICanonicalTransactionChain.sol/ICanonicalTransactionChain.json')
        } catch {}
        

        let IChainStorageContainer
        try {
          IChainStorageContainer = require('../artifacts/contracts/L1/rollup/IChainStorageContainer.sol/IChainStorageContainer.json')
        } catch {}
        

        let IStateCommitmentChain
        try {
          IStateCommitmentChain = require('../artifacts/contracts/L1/rollup/IStateCommitmentChain.sol/IStateCommitmentChain.json')
        } catch {}
        

        let StateCommitmentChain
        try {
          StateCommitmentChain = require('../artifacts/contracts/L1/rollup/StateCommitmentChain.sol/StateCommitmentChain.json')
        } catch {}
        

        let TeleportrDeposit
        try {
          TeleportrDeposit = require('../artifacts/contracts/L1/teleportr/TeleportrDeposit.sol/TeleportrDeposit.json')
        } catch {}
        

        let BondManager
        try {
          BondManager = require('../artifacts/contracts/L1/verification/BondManager.sol/BondManager.json')
        } catch {}
        

        let IBondManager
        try {
          IBondManager = require('../artifacts/contracts/L1/verification/IBondManager.sol/IBondManager.json')
        } catch {}
        

        let IL2CrossDomainMessenger
        try {
          IL2CrossDomainMessenger = require('../artifacts/contracts/L2/messaging/IL2CrossDomainMessenger.sol/IL2CrossDomainMessenger.json')
        } catch {}
        

        let IL2ERC20Bridge
        try {
          IL2ERC20Bridge = require('../artifacts/contracts/L2/messaging/IL2ERC20Bridge.sol/IL2ERC20Bridge.json')
        } catch {}
        

        let IL2ERC721Bridge
        try {
          IL2ERC721Bridge = require('../artifacts/contracts/L2/messaging/IL2ERC721Bridge.sol/IL2ERC721Bridge.json')
        } catch {}
        

        let L2CrossDomainMessenger
        try {
          L2CrossDomainMessenger = require('../artifacts/contracts/L2/messaging/L2CrossDomainMessenger.sol/L2CrossDomainMessenger.json')
        } catch {}
        

        let L2ERC721Bridge
        try {
          L2ERC721Bridge = require('../artifacts/contracts/L2/messaging/L2ERC721Bridge.sol/L2ERC721Bridge.json')
        } catch {}
        

        let L2StandardBridge
        try {
          L2StandardBridge = require('../artifacts/contracts/L2/messaging/L2StandardBridge.sol/L2StandardBridge.json')
        } catch {}
        

        let L2StandardERC721Factory
        try {
          L2StandardERC721Factory = require('../artifacts/contracts/L2/messaging/L2StandardERC721Factory.sol/L2StandardERC721Factory.json')
        } catch {}
        

        let L2StandardTokenFactory
        try {
          L2StandardTokenFactory = require('../artifacts/contracts/L2/messaging/L2StandardTokenFactory.sol/L2StandardTokenFactory.json')
        } catch {}
        

        let iOVM_L1BlockNumber
        try {
          iOVM_L1BlockNumber = require('../artifacts/contracts/L2/predeploys/iOVM_L1BlockNumber.sol/iOVM_L1BlockNumber.json')
        } catch {}
        

        let iOVM_L2ToL1MessagePasser
        try {
          iOVM_L2ToL1MessagePasser = require('../artifacts/contracts/L2/predeploys/iOVM_L2ToL1MessagePasser.sol/iOVM_L2ToL1MessagePasser.json')
        } catch {}
        

        let OVM_DeployerWhitelist
        try {
          OVM_DeployerWhitelist = require('../artifacts/contracts/L2/predeploys/OVM_DeployerWhitelist.sol/OVM_DeployerWhitelist.json')
        } catch {}
        

        let OVM_ETH
        try {
          OVM_ETH = require('../artifacts/contracts/L2/predeploys/OVM_ETH.sol/OVM_ETH.json')
        } catch {}
        

        let OVM_GasPriceOracle
        try {
          OVM_GasPriceOracle = require('../artifacts/contracts/L2/predeploys/OVM_GasPriceOracle.sol/OVM_GasPriceOracle.json')
        } catch {}
        

        let OVM_L2ToL1MessagePasser
        try {
          OVM_L2ToL1MessagePasser = require('../artifacts/contracts/L2/predeploys/OVM_L2ToL1MessagePasser.sol/OVM_L2ToL1MessagePasser.json')
        } catch {}
        

        let OVM_SequencerFeeVault
        try {
          OVM_SequencerFeeVault = require('../artifacts/contracts/L2/predeploys/OVM_SequencerFeeVault.sol/OVM_SequencerFeeVault.json')
        } catch {}
        

        let WETH9
        try {
          WETH9 = require('../artifacts/contracts/L2/predeploys/WETH9.sol/WETH9.json')
        } catch {}
        

        let TeleportrDisburser
        try {
          TeleportrDisburser = require('../artifacts/contracts/L2/teleportr/TeleportrDisburser.sol/TeleportrDisburser.json')
        } catch {}
        

        let CrossDomainEnabled
        try {
          CrossDomainEnabled = require('../artifacts/contracts/libraries/bridge/CrossDomainEnabled.sol/CrossDomainEnabled.json')
        } catch {}
        

        let ICrossDomainMessenger
        try {
          ICrossDomainMessenger = require('../artifacts/contracts/libraries/bridge/ICrossDomainMessenger.sol/ICrossDomainMessenger.json')
        } catch {}
        

        let Lib_CrossDomainUtils
        try {
          Lib_CrossDomainUtils = require('../artifacts/contracts/libraries/bridge/Lib_CrossDomainUtils.sol/Lib_CrossDomainUtils.json')
        } catch {}
        

        let Lib_OVMCodec
        try {
          Lib_OVMCodec = require('../artifacts/contracts/libraries/codec/Lib_OVMCodec.sol/Lib_OVMCodec.json')
        } catch {}
        

        let Lib_DefaultValues
        try {
          Lib_DefaultValues = require('../artifacts/contracts/libraries/constants/Lib_DefaultValues.sol/Lib_DefaultValues.json')
        } catch {}
        

        let Lib_PredeployAddresses
        try {
          Lib_PredeployAddresses = require('../artifacts/contracts/libraries/constants/Lib_PredeployAddresses.sol/Lib_PredeployAddresses.json')
        } catch {}
        

        let Lib_AddressManager
        try {
          Lib_AddressManager = require('../artifacts/contracts/libraries/resolver/Lib_AddressManager.sol/Lib_AddressManager.json')
        } catch {}
        

        let Lib_AddressResolver
        try {
          Lib_AddressResolver = require('../artifacts/contracts/libraries/resolver/Lib_AddressResolver.sol/Lib_AddressResolver.json')
        } catch {}
        

        let Lib_ResolvedDelegateProxy
        try {
          Lib_ResolvedDelegateProxy = require('../artifacts/contracts/libraries/resolver/Lib_ResolvedDelegateProxy.sol/Lib_ResolvedDelegateProxy.json')
        } catch {}
        

        let Lib_RLPReader
        try {
          Lib_RLPReader = require('../artifacts/contracts/libraries/rlp/Lib_RLPReader.sol/Lib_RLPReader.json')
        } catch {}
        

        let Lib_RLPWriter
        try {
          Lib_RLPWriter = require('../artifacts/contracts/libraries/rlp/Lib_RLPWriter.sol/Lib_RLPWriter.json')
        } catch {}
        

        let Lib_MerkleTrie
        try {
          Lib_MerkleTrie = require('../artifacts/contracts/libraries/trie/Lib_MerkleTrie.sol/Lib_MerkleTrie.json')
        } catch {}
        

        let Lib_SecureMerkleTrie
        try {
          Lib_SecureMerkleTrie = require('../artifacts/contracts/libraries/trie/Lib_SecureMerkleTrie.sol/Lib_SecureMerkleTrie.json')
        } catch {}
        

        let Lib_Buffer
        try {
          Lib_Buffer = require('../artifacts/contracts/libraries/utils/Lib_Buffer.sol/Lib_Buffer.json')
        } catch {}
        

        let Lib_Bytes32Utils
        try {
          Lib_Bytes32Utils = require('../artifacts/contracts/libraries/utils/Lib_Bytes32Utils.sol/Lib_Bytes32Utils.json')
        } catch {}
        

        let Lib_BytesUtils
        try {
          Lib_BytesUtils = require('../artifacts/contracts/libraries/utils/Lib_BytesUtils.sol/Lib_BytesUtils.json')
        } catch {}
        

        let Lib_MerkleTree
        try {
          Lib_MerkleTree = require('../artifacts/contracts/libraries/utils/Lib_MerkleTree.sol/Lib_MerkleTree.json')
        } catch {}
        

        let AddressAliasHelper
        try {
          AddressAliasHelper = require('../artifacts/contracts/standards/AddressAliasHelper.sol/AddressAliasHelper.json')
        } catch {}
        

        let IL2StandardERC20
        try {
          IL2StandardERC20 = require('../artifacts/contracts/standards/IL2StandardERC20.sol/IL2StandardERC20.json')
        } catch {}
        

        let IL2StandardERC721
        try {
          IL2StandardERC721 = require('../artifacts/contracts/standards/IL2StandardERC721.sol/IL2StandardERC721.json')
        } catch {}
        

        let L2StandardERC20
        try {
          L2StandardERC20 = require('../artifacts/contracts/standards/L2StandardERC20.sol/L2StandardERC20.json')
        } catch {}
        

        let L2StandardERC721
        try {
          L2StandardERC721 = require('../artifacts/contracts/standards/L2StandardERC721.sol/L2StandardERC721.json')
        } catch {}
        

        let FailingReceiver
        try {
          FailingReceiver = require('../artifacts/contracts/test-helpers/FailingReceiver.sol/FailingReceiver.json')
        } catch {}
        

        let Helper_SimpleProxy
        try {
          Helper_SimpleProxy = require('../artifacts/contracts/test-helpers/Helper_SimpleProxy.sol/Helper_SimpleProxy.json')
        } catch {}
        

        let TestERC20
        try {
          TestERC20 = require('../artifacts/contracts/test-helpers/TestERC20.sol/TestERC20.json')
        } catch {}
        

        let TestLib_CrossDomainUtils
        try {
          TestLib_CrossDomainUtils = require('../artifacts/contracts/test-libraries/bridge/TestLib_CrossDomainUtils.sol/TestLib_CrossDomainUtils.json')
        } catch {}
        

        let TestLib_OVMCodec
        try {
          TestLib_OVMCodec = require('../artifacts/contracts/test-libraries/codec/TestLib_OVMCodec.sol/TestLib_OVMCodec.json')
        } catch {}
        

        let TestLib_RLPReader
        try {
          TestLib_RLPReader = require('../artifacts/contracts/test-libraries/rlp/TestLib_RLPReader.sol/TestLib_RLPReader.json')
        } catch {}
        

        let TestLib_RLPWriter
        try {
          TestLib_RLPWriter = require('../artifacts/contracts/test-libraries/rlp/TestLib_RLPWriter.sol/TestLib_RLPWriter.json')
        } catch {}
        

        let TestLib_AddressAliasHelper
        try {
          TestLib_AddressAliasHelper = require('../artifacts/contracts/test-libraries/standards/TestLib_AddressAliasHelper.sol/TestLib_AddressAliasHelper.json')
        } catch {}
        

        let TestLib_MerkleTrie
        try {
          TestLib_MerkleTrie = require('../artifacts/contracts/test-libraries/trie/TestLib_MerkleTrie.sol/TestLib_MerkleTrie.json')
        } catch {}
        

        let TestLib_SecureMerkleTrie
        try {
          TestLib_SecureMerkleTrie = require('../artifacts/contracts/test-libraries/trie/TestLib_SecureMerkleTrie.sol/TestLib_SecureMerkleTrie.json')
        } catch {}
        

        let TestLib_Buffer
        try {
          TestLib_Buffer = require('../artifacts/contracts/test-libraries/utils/TestLib_Buffer.sol/TestLib_Buffer.json')
        } catch {}
        

        let TestLib_Bytes32Utils
        try {
          TestLib_Bytes32Utils = require('../artifacts/contracts/test-libraries/utils/TestLib_Bytes32Utils.sol/TestLib_Bytes32Utils.json')
        } catch {}
        

        let TestLib_BytesUtils
        try {
          TestLib_BytesUtils = require('../artifacts/contracts/test-libraries/utils/TestLib_BytesUtils.sol/TestLib_BytesUtils.json')
        } catch {}
        

        let TestLib_MerkleTree
        try {
          TestLib_MerkleTree = require('../artifacts/contracts/test-libraries/utils/TestLib_MerkleTree.sol/TestLib_MerkleTree.json')
        } catch {}
        

        let Demo_L2StandardERC721Factory
        try {
          Demo_L2StandardERC721Factory = require('../artifacts/contracts/tutorial/Demo_L2StandardERC721Factory.sol/Demo_L2StandardERC721Factory.json')
        } catch {}
        

        let L1ERC721
        try {
          L1ERC721 = require('../artifacts/contracts/tutorial/L1ERC721.sol/L1ERC721.json')
        } catch {}
        

    export const getContractArtifact = (name: string): any => {
      return {
        iL1ChugSplashDeployer,
L1ChugSplashProxy,
AddressDictator,
ChugSplashDictator,
IL1CrossDomainMessenger,
IL1ERC20Bridge,
IL1ERC721Bridge,
IL1StandardBridge,
L1CrossDomainMessenger,
L1ERC721Bridge,
L1StandardBridge,
CanonicalTransactionChain,
ChainStorageContainer,
ICanonicalTransactionChain,
IChainStorageContainer,
IStateCommitmentChain,
StateCommitmentChain,
TeleportrDeposit,
BondManager,
IBondManager,
IL2CrossDomainMessenger,
IL2ERC20Bridge,
IL2ERC721Bridge,
L2CrossDomainMessenger,
L2ERC721Bridge,
L2StandardBridge,
L2StandardERC721Factory,
L2StandardTokenFactory,
iOVM_L1BlockNumber,
iOVM_L2ToL1MessagePasser,
OVM_DeployerWhitelist,
OVM_ETH,
OVM_GasPriceOracle,
OVM_L2ToL1MessagePasser,
OVM_SequencerFeeVault,
WETH9,
TeleportrDisburser,
CrossDomainEnabled,
ICrossDomainMessenger,
Lib_CrossDomainUtils,
Lib_OVMCodec,
Lib_DefaultValues,
Lib_PredeployAddresses,
Lib_AddressManager,
Lib_AddressResolver,
Lib_ResolvedDelegateProxy,
Lib_RLPReader,
Lib_RLPWriter,
Lib_MerkleTrie,
Lib_SecureMerkleTrie,
Lib_Buffer,
Lib_Bytes32Utils,
Lib_BytesUtils,
Lib_MerkleTree,
AddressAliasHelper,
IL2StandardERC20,
IL2StandardERC721,
L2StandardERC20,
L2StandardERC721,
FailingReceiver,
Helper_SimpleProxy,
TestERC20,
TestLib_CrossDomainUtils,
TestLib_OVMCodec,
TestLib_RLPReader,
TestLib_RLPWriter,
TestLib_AddressAliasHelper,
TestLib_MerkleTrie,
TestLib_SecureMerkleTrie,
TestLib_Buffer,
TestLib_Bytes32Utils,
TestLib_BytesUtils,
TestLib_MerkleTree,
Demo_L2StandardERC721Factory,
L1ERC721
      }[name]
    }
    